= simple_form_for @feed_zone, html: { data: { controller: "nested-form", nested_form_wrapper_selector_value: '.nested-form-wrapper' } } do |f|
  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

  .form-inputs
    /zone-nested-form
    template[data-nested-form-target="template"]
      = f.fields_for :feed_zones, FeedZone.new, child_index: 'NEW_RECORD' do |todo_fields|
        == render "feed_zones/nested_form", f: todo_fields

    - f.fields_for :feed_zones do |todo_fields|
      == render "feed_zones/nested_form", f: todo_fields
    div[data-nested-form-target="target"]
    button(type="button" data-action="nested-form#add") Add Feed
   

  /  div[data-controller="checkbox-select-all"]
  /   table.table
  /     tbody
  /     =f.input :zone_id,input_html: {value: @zone.id}, as: :hidden
  /     - @categoryFeed.each do |category|
  /       tr
  /         td
  /           = check_box_tag 'category_ids[]', category.id, nil, { data: { checkbox_select_all_target: "parent", action: "change->checkbox-select-all#toggleChildren", parent_id: category.id }}
  /           = category.name
  /       - category.feeds.each do |feed|
  /         tr
  /           td
  /             .container_check
  /               = check_box_tag 'feed_ids[]', feed.id, nil, { data: { checkbox_select_all_target: "child", action: "change->checkbox-select-all#toggleParent", parent_id: category.id }}
  /               = feed.feed_name
  /               div[data-controller="showhide" data-showhide-show-if-value="IN CNAME rpz-passthru" ]
  /                 = select_tag "feed_#{feed.id}_selected_action", options_for_select([['DROP', 'IN CNAME rpz-drop'], ['NXDOMAIN', 'CNAME .'], ['PASSTHRU', 'IN CNAME rpz-passthru'], ['NODATA', 'CNAME *.'], ['TCP', 'CNAME rpz-tcp-only']]), class: 'form-select', data: { showhide_target: "input", action: "change->showhide#toggle" }
  /                 = f.input :destination, placeholder: "Destination", input_html: { data: { showhide_target: "output" } }
  /                 / = text_field_tag "feed_#{feed.id}_destination", nil, class: 'form-control', placeholder: 'Destination', data: { showhide_target: "output",action: "change->showhide#toggle"  } 


  .form-actions
    = f.button :submit





/ @rpz_zone = RpzZone.find(params[:rpz_zone_id])
/     params[:feed_ids].each do |feed_id|
/         puts "feed ID: #{feed_id}"  
/         next unless Feed.exists?(id: feed_id)
/         @category_id = Feed.find(feed_id).category_id
/         @zone_category = ZoneCategory.new(rpz_zone_id: @rpz_zone.id, feed_id: feed_id, category_id: @category_id, action: 1, destination: "google.com")
/         puts "To be created: #{@zone_category.inspect}"
/         next if ZoneCategory.exists?(rpz_zone_id: @rpz_zone.id, feed_id: feed_id)
/         @zone_category.save
/     end
/     redirect_to @rpz_zone